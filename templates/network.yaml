kind: Service
apiVersion: v1
metadata:
  name: {{ include "ctfd.name" . }}-mysql
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/component: mysql
    app.kubernetes.io/name: {{ include "ctfd.name" . }}-mysql
    app.kubernetes.io/part-of: {{ include "ctfd.name" . }}
    autoIdleIgnore: 'true'  
spec:
  ports:
    - name: {{ include "ctfd.name" . }}-mysql
      protocol: TCP
      port: 3306
      targetPort: 3306
  selector:
    name: {{ include "ctfd.name" . }}-mysql
---    
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: redis
    app.kubernetes.io/name: {{ include "ctfd.name" . }}-redis
    app.kubernetes.io/part-of: {{ include "ctfd.name" . }}
    autoIdleIgnore: 'true'
  name: {{ include "ctfd.name" . }}-redis
  namespace: {{ .Values.namespace }}
spec:
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  selector:
    app.kubernetes.io/name: {{ include "ctfd.name" . }}-redis
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "ctfd.name" . }}
  annotations:
    service.alpha.openshift.io/serving-cert-secret-name: {{ include "ctfd.name" . }}-nginx-tls
  labels:
    app.kubernetes.io/name: {{ include "ctfd.name" . }}
    helm.sh/chart: {{ include "ctfd.chart" . }}
    app.kubernetes.io/instance: {{ include "ctfd.name" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    autoIdleIgnore: 'true'
spec:
  ports:
  - name: https
    port: 443
    targetPort: https
    protocol: TCP
  selector:
    app.kubernetes.io/name: {{ include "ctfd.name" . }}
    app.kubernetes.io/instance: {{ include "ctfd.name" . }}
---
{{- if not ingress }}
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: {{ include "ctfd.name" . }}
  labels:
    app.kubernetes.io/name: {{ include "ctfd.name" . }}
    helm.sh/chart: {{ include "ctfd.chart" . }}
    app.kubernetes.io/instance: {{ include "ctfd.name" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    router: internal
spec:
  host: >-
    {{ include "ctfd.name" . }}-{{ .Values.namespace }}.{{ .Values.clusterURL }}
  port:
    targetPort: https
  to:
    kind: Service
    name: {{ include "ctfd.name" . }}
    weight: 100
  tls:
    termination: reencrypt
    insecureEdgeTerminationPolicy: Redirect
{{- end }}
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ include "ctfd.name" . }}-nginx-config
data:
 nginx.conf: |
    error_log /tmp/error.log;
    pid       /tmp/nginx.pid;
    
    events {
      # No special events for this simple setup
    }
    http {
      server {
          listen 8443 ssl http2;
          server_name  localhost;

          ssl_certificate     /etc/tls/private/tls.crt;
          ssl_certificate_key /etc/tls/private/tls.key;
          ssl_protocols       TLSv1.2;
          ssl_ciphers         HIGH:!aNULL:!MD5;

          # Set a number of log, temp and cache file options that will otherwise
          # default to restricted locations accessible only to root.
          access_log /tmp/nginx_host.access.log;
          client_body_temp_path /tmp/client_body;
          fastcgi_temp_path /tmp/fastcgi_temp;
          proxy_temp_path /tmp/proxy_temp;
          scgi_temp_path /tmp/scgi_temp;
          uwsgi_temp_path /tmp/uwsgi_temp;

          index index.html;
          error_log /dev/stdout info;
          
          location / {
              proxy_set_header Host $host:443;
              proxy_set_header Forwarded "host=$host;proto=https";
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              # Set CORS Headers
              if ($request_method ~* "(GET|POST|PUT|DELETE)") {
                add_header "Access-Control-Allow-Origin"  "*";
              }
              # Preflighted requests
              if ($request_method = OPTIONS ) {
                add_header "Access-Control-Allow-Origin"  "*";
                add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, HEAD";
                add_header "Access-Control-Allow-Headers" "Authorization, Origin, X-Requested-With, Content-Type, Accept";
                return 200;
              }
              proxy_pass http://127.0.0.1:{{ .Values.ctfdPort }};
          }
      }
    }
